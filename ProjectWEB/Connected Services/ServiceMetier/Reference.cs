//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectWEB.ServiceMetier {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMetier.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPersonne", ReplyAction="http://tempuri.org/IService1/AddPersonneResponse")]
        bool AddPersonne(ProjectMetier.Model.Personne personne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPersonne", ReplyAction="http://tempuri.org/IService1/AddPersonneResponse")]
        System.Threading.Tasks.Task<bool> AddPersonneAsync(ProjectMetier.Model.Personne personne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonne", ReplyAction="http://tempuri.org/IService1/GetPersonneResponse")]
        ProjectMetier.Model.Personne GetPersonne(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPersonne", ReplyAction="http://tempuri.org/IService1/GetPersonneResponse")]
        System.Threading.Tasks.Task<ProjectMetier.Model.Personne> GetPersonneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePersonne", ReplyAction="http://tempuri.org/IService1/UpdatePersonneResponse")]
        bool UpdatePersonne(ProjectMetier.Model.Personne personne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePersonne", ReplyAction="http://tempuri.org/IService1/UpdatePersonneResponse")]
        System.Threading.Tasks.Task<bool> UpdatePersonneAsync(ProjectMetier.Model.Personne personne);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePersonne", ReplyAction="http://tempuri.org/IService1/DeletePersonneResponse")]
        bool DeletePersonne(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePersonne", ReplyAction="http://tempuri.org/IService1/DeletePersonneResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonneAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListPersonne", ReplyAction="http://tempuri.org/IService1/ListPersonneResponse")]
        ProjectMetier.Model.Personne[] ListPersonne(string email, string tel, string debutDateNaissance, string finDateNaissance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListPersonne", ReplyAction="http://tempuri.org/IService1/ListPersonneResponse")]
        System.Threading.Tasks.Task<ProjectMetier.Model.Personne[]> ListPersonneAsync(string email, string tel, string debutDateNaissance, string finDateNaissance);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ProjectWEB.ServiceMetier.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ProjectWEB.ServiceMetier.IService1>, ProjectWEB.ServiceMetier.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddPersonne(ProjectMetier.Model.Personne personne) {
            return base.Channel.AddPersonne(personne);
        }
        
        public System.Threading.Tasks.Task<bool> AddPersonneAsync(ProjectMetier.Model.Personne personne) {
            return base.Channel.AddPersonneAsync(personne);
        }
        
        public ProjectMetier.Model.Personne GetPersonne(int id) {
            return base.Channel.GetPersonne(id);
        }
        
        public System.Threading.Tasks.Task<ProjectMetier.Model.Personne> GetPersonneAsync(int id) {
            return base.Channel.GetPersonneAsync(id);
        }
        
        public bool UpdatePersonne(ProjectMetier.Model.Personne personne) {
            return base.Channel.UpdatePersonne(personne);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePersonneAsync(ProjectMetier.Model.Personne personne) {
            return base.Channel.UpdatePersonneAsync(personne);
        }
        
        public bool DeletePersonne(int id) {
            return base.Channel.DeletePersonne(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonneAsync(int id) {
            return base.Channel.DeletePersonneAsync(id);
        }
        
        public ProjectMetier.Model.Personne[] ListPersonne(string email, string tel, string debutDateNaissance, string finDateNaissance) {
            return base.Channel.ListPersonne(email, tel, debutDateNaissance, finDateNaissance);
        }
        
        public System.Threading.Tasks.Task<ProjectMetier.Model.Personne[]> ListPersonneAsync(string email, string tel, string debutDateNaissance, string finDateNaissance) {
            return base.Channel.ListPersonneAsync(email, tel, debutDateNaissance, finDateNaissance);
        }
    }
}
